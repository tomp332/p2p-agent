// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: protos/files_node.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FilesNodeServiceClient is the client API for FilesNodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilesNodeServiceClient interface {
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (FilesNodeService_UploadFileClient, error)
	DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (FilesNodeService_DownloadFileClient, error)
	DirectDownloadFile(ctx context.Context, in *DirectDownloadFileRequest, opts ...grpc.CallOption) (FilesNodeService_DirectDownloadFileClient, error)
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error)
	SearchFile(ctx context.Context, in *SearchFileRequest, opts ...grpc.CallOption) (*SearchFileResponse, error)
	Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error)
}

type filesNodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFilesNodeServiceClient(cc grpc.ClientConnInterface) FilesNodeServiceClient {
	return &filesNodeServiceClient{cc}
}

func (c *filesNodeServiceClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (FilesNodeService_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FilesNodeService_ServiceDesc.Streams[0], "/p2p_agent.FilesNodeService/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &filesNodeServiceUploadFileClient{stream}
	return x, nil
}

type FilesNodeService_UploadFileClient interface {
	Send(*UploadFileRequest) error
	CloseAndRecv() (*UploadFileResponse, error)
	grpc.ClientStream
}

type filesNodeServiceUploadFileClient struct {
	grpc.ClientStream
}

func (x *filesNodeServiceUploadFileClient) Send(m *UploadFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *filesNodeServiceUploadFileClient) CloseAndRecv() (*UploadFileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *filesNodeServiceClient) DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (FilesNodeService_DownloadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FilesNodeService_ServiceDesc.Streams[1], "/p2p_agent.FilesNodeService/DownloadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &filesNodeServiceDownloadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FilesNodeService_DownloadFileClient interface {
	Recv() (*DownloadFileResponse, error)
	grpc.ClientStream
}

type filesNodeServiceDownloadFileClient struct {
	grpc.ClientStream
}

func (x *filesNodeServiceDownloadFileClient) Recv() (*DownloadFileResponse, error) {
	m := new(DownloadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *filesNodeServiceClient) DirectDownloadFile(ctx context.Context, in *DirectDownloadFileRequest, opts ...grpc.CallOption) (FilesNodeService_DirectDownloadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FilesNodeService_ServiceDesc.Streams[2], "/p2p_agent.FilesNodeService/DirectDownloadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &filesNodeServiceDirectDownloadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FilesNodeService_DirectDownloadFileClient interface {
	Recv() (*DirectDownloadFileResponse, error)
	grpc.ClientStream
}

type filesNodeServiceDirectDownloadFileClient struct {
	grpc.ClientStream
}

func (x *filesNodeServiceDirectDownloadFileClient) Recv() (*DirectDownloadFileResponse, error) {
	m := new(DirectDownloadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *filesNodeServiceClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error) {
	out := new(DeleteFileResponse)
	err := c.cc.Invoke(ctx, "/p2p_agent.FilesNodeService/DeleteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesNodeServiceClient) SearchFile(ctx context.Context, in *SearchFileRequest, opts ...grpc.CallOption) (*SearchFileResponse, error) {
	out := new(SearchFileResponse)
	err := c.cc.Invoke(ctx, "/p2p_agent.FilesNodeService/SearchFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesNodeServiceClient) Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error) {
	out := new(AuthenticateResponse)
	err := c.cc.Invoke(ctx, "/p2p_agent.FilesNodeService/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilesNodeServiceServer is the server API for FilesNodeService service.
// All implementations must embed UnimplementedFilesNodeServiceServer
// for forward compatibility
type FilesNodeServiceServer interface {
	UploadFile(FilesNodeService_UploadFileServer) error
	DownloadFile(*DownloadFileRequest, FilesNodeService_DownloadFileServer) error
	DirectDownloadFile(*DirectDownloadFileRequest, FilesNodeService_DirectDownloadFileServer) error
	DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error)
	SearchFile(context.Context, *SearchFileRequest) (*SearchFileResponse, error)
	Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error)
	mustEmbedUnimplementedFilesNodeServiceServer()
}

// UnimplementedFilesNodeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFilesNodeServiceServer struct {
}

func (UnimplementedFilesNodeServiceServer) UploadFile(FilesNodeService_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedFilesNodeServiceServer) DownloadFile(*DownloadFileRequest, FilesNodeService_DownloadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedFilesNodeServiceServer) DirectDownloadFile(*DirectDownloadFileRequest, FilesNodeService_DirectDownloadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DirectDownloadFile not implemented")
}
func (UnimplementedFilesNodeServiceServer) DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedFilesNodeServiceServer) SearchFile(context.Context, *SearchFileRequest) (*SearchFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchFile not implemented")
}
func (UnimplementedFilesNodeServiceServer) Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedFilesNodeServiceServer) mustEmbedUnimplementedFilesNodeServiceServer() {}

// UnsafeFilesNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilesNodeServiceServer will
// result in compilation errors.
type UnsafeFilesNodeServiceServer interface {
	mustEmbedUnimplementedFilesNodeServiceServer()
}

func RegisterFilesNodeServiceServer(s grpc.ServiceRegistrar, srv FilesNodeServiceServer) {
	s.RegisterService(&FilesNodeService_ServiceDesc, srv)
}

func _FilesNodeService_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FilesNodeServiceServer).UploadFile(&filesNodeServiceUploadFileServer{stream})
}

type FilesNodeService_UploadFileServer interface {
	SendAndClose(*UploadFileResponse) error
	Recv() (*UploadFileRequest, error)
	grpc.ServerStream
}

type filesNodeServiceUploadFileServer struct {
	grpc.ServerStream
}

func (x *filesNodeServiceUploadFileServer) SendAndClose(m *UploadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *filesNodeServiceUploadFileServer) Recv() (*UploadFileRequest, error) {
	m := new(UploadFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FilesNodeService_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FilesNodeServiceServer).DownloadFile(m, &filesNodeServiceDownloadFileServer{stream})
}

type FilesNodeService_DownloadFileServer interface {
	Send(*DownloadFileResponse) error
	grpc.ServerStream
}

type filesNodeServiceDownloadFileServer struct {
	grpc.ServerStream
}

func (x *filesNodeServiceDownloadFileServer) Send(m *DownloadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FilesNodeService_DirectDownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DirectDownloadFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FilesNodeServiceServer).DirectDownloadFile(m, &filesNodeServiceDirectDownloadFileServer{stream})
}

type FilesNodeService_DirectDownloadFileServer interface {
	Send(*DirectDownloadFileResponse) error
	grpc.ServerStream
}

type filesNodeServiceDirectDownloadFileServer struct {
	grpc.ServerStream
}

func (x *filesNodeServiceDirectDownloadFileServer) Send(m *DirectDownloadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FilesNodeService_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesNodeServiceServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/p2p_agent.FilesNodeService/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesNodeServiceServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesNodeService_SearchFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesNodeServiceServer).SearchFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/p2p_agent.FilesNodeService/SearchFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesNodeServiceServer).SearchFile(ctx, req.(*SearchFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesNodeService_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesNodeServiceServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/p2p_agent.FilesNodeService/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesNodeServiceServer).Authenticate(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FilesNodeService_ServiceDesc is the grpc.ServiceDesc for FilesNodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FilesNodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "p2p_agent.FilesNodeService",
	HandlerType: (*FilesNodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteFile",
			Handler:    _FilesNodeService_DeleteFile_Handler,
		},
		{
			MethodName: "SearchFile",
			Handler:    _FilesNodeService_SearchFile_Handler,
		},
		{
			MethodName: "Authenticate",
			Handler:    _FilesNodeService_Authenticate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _FilesNodeService_UploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadFile",
			Handler:       _FilesNodeService_DownloadFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DirectDownloadFile",
			Handler:       _FilesNodeService_DirectDownloadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/files_node.proto",
}
