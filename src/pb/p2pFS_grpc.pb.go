// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: protos/p2pFS.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	FileSystemNodeService_UploadFile_FullMethodName   = "/p2p_agent.FileSystemNodeService/UploadFile"
	FileSystemNodeService_DownloadFile_FullMethodName = "/p2p_agent.FileSystemNodeService/DownloadFile"
	FileSystemNodeService_DeleteFile_FullMethodName   = "/p2p_agent.FileSystemNodeService/DeleteFile"
)

// FileSystemNodeServiceClient is the client API for FileSystemNodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileSystemNodeServiceClient interface {
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (FileSystemNodeService_UploadFileClient, error)
	DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (*DownloadFileResponse, error)
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error)
}

type fileSystemNodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileSystemNodeServiceClient(cc grpc.ClientConnInterface) FileSystemNodeServiceClient {
	return &fileSystemNodeServiceClient{cc}
}

func (c *fileSystemNodeServiceClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (FileSystemNodeService_UploadFileClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileSystemNodeService_ServiceDesc.Streams[0], FileSystemNodeService_UploadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &fileSystemNodeServiceUploadFileClient{ClientStream: stream}
	return x, nil
}

type FileSystemNodeService_UploadFileClient interface {
	Send(*UploadFileRequest) error
	CloseAndRecv() (*UploadFileResponse, error)
	grpc.ClientStream
}

type fileSystemNodeServiceUploadFileClient struct {
	grpc.ClientStream
}

func (x *fileSystemNodeServiceUploadFileClient) Send(m *UploadFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileSystemNodeServiceUploadFileClient) CloseAndRecv() (*UploadFileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileSystemNodeServiceClient) DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (*DownloadFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadFileResponse)
	err := c.cc.Invoke(ctx, FileSystemNodeService_DownloadFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemNodeServiceClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFileResponse)
	err := c.cc.Invoke(ctx, FileSystemNodeService_DeleteFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileSystemNodeServiceServer is the server API for FileSystemNodeService service.
// All implementations must embed UnimplementedFileSystemNodeServiceServer
// for forward compatibility
type FileSystemNodeServiceServer interface {
	UploadFile(FileSystemNodeService_UploadFileServer) error
	DownloadFile(context.Context, *DownloadFileRequest) (*DownloadFileResponse, error)
	DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error)
	mustEmbedUnimplementedFileSystemNodeServiceServer()
}

// UnimplementedFileSystemNodeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileSystemNodeServiceServer struct {
}

func (UnimplementedFileSystemNodeServiceServer) UploadFile(FileSystemNodeService_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedFileSystemNodeServiceServer) DownloadFile(context.Context, *DownloadFileRequest) (*DownloadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedFileSystemNodeServiceServer) DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedFileSystemNodeServiceServer) mustEmbedUnimplementedFileSystemNodeServiceServer() {}

// UnsafeFileSystemNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileSystemNodeServiceServer will
// result in compilation errors.
type UnsafeFileSystemNodeServiceServer interface {
	mustEmbedUnimplementedFileSystemNodeServiceServer()
}

func RegisterFileSystemNodeServiceServer(s grpc.ServiceRegistrar, srv FileSystemNodeServiceServer) {
	s.RegisterService(&FileSystemNodeService_ServiceDesc, srv)
}

func _FileSystemNodeService_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileSystemNodeServiceServer).UploadFile(&fileSystemNodeServiceUploadFileServer{ServerStream: stream})
}

type FileSystemNodeService_UploadFileServer interface {
	SendAndClose(*UploadFileResponse) error
	Recv() (*UploadFileRequest, error)
	grpc.ServerStream
}

type fileSystemNodeServiceUploadFileServer struct {
	grpc.ServerStream
}

func (x *fileSystemNodeServiceUploadFileServer) SendAndClose(m *UploadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileSystemNodeServiceUploadFileServer) Recv() (*UploadFileRequest, error) {
	m := new(UploadFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileSystemNodeService_DownloadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemNodeServiceServer).DownloadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileSystemNodeService_DownloadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemNodeServiceServer).DownloadFile(ctx, req.(*DownloadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystemNodeService_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemNodeServiceServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileSystemNodeService_DeleteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemNodeServiceServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileSystemNodeService_ServiceDesc is the grpc.ServiceDesc for FileSystemNodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileSystemNodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "p2p_agent.FileSystemNodeService",
	HandlerType: (*FileSystemNodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DownloadFile",
			Handler:    _FileSystemNodeService_DownloadFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _FileSystemNodeService_DeleteFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _FileSystemNodeService_UploadFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "protos/p2pFS.proto",
}
