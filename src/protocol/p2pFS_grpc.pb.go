// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: p2pFS.proto

package p2pFS

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	FileSharing_StoreChunk_FullMethodName    = "/p2pFS.FileSharing/StoreChunk"
	FileSharing_RetrieveChunk_FullMethodName = "/p2pFS.FileSharing/RetrieveChunk"
)

// FileSharingClient is the client API for FileSharing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileSharingClient interface {
	StoreChunk(ctx context.Context, in *StoreChunkRequest, opts ...grpc.CallOption) (*StoreChunkResponse, error)
	RetrieveChunk(ctx context.Context, in *RetrieveChunkRequest, opts ...grpc.CallOption) (*RetrieveChunkResponse, error)
}

type fileSharingClient struct {
	cc grpc.ClientConnInterface
}

func NewFileSharingClient(cc grpc.ClientConnInterface) FileSharingClient {
	return &fileSharingClient{cc}
}

func (c *fileSharingClient) StoreChunk(ctx context.Context, in *StoreChunkRequest, opts ...grpc.CallOption) (*StoreChunkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreChunkResponse)
	err := c.cc.Invoke(ctx, FileSharing_StoreChunk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSharingClient) RetrieveChunk(ctx context.Context, in *RetrieveChunkRequest, opts ...grpc.CallOption) (*RetrieveChunkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RetrieveChunkResponse)
	err := c.cc.Invoke(ctx, FileSharing_RetrieveChunk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileSharingServer is the server API for FileSharing service.
// All implementations must embed UnimplementedFileSharingServer
// for forward compatibility
type FileSharingServer interface {
	StoreChunk(context.Context, *StoreChunkRequest) (*StoreChunkResponse, error)
	RetrieveChunk(context.Context, *RetrieveChunkRequest) (*RetrieveChunkResponse, error)
	mustEmbedUnimplementedFileSharingServer()
}

// UnimplementedFileSharingServer must be embedded to have forward compatible implementations.
type UnimplementedFileSharingServer struct {
}

func (UnimplementedFileSharingServer) StoreChunk(context.Context, *StoreChunkRequest) (*StoreChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreChunk not implemented")
}
func (UnimplementedFileSharingServer) RetrieveChunk(context.Context, *RetrieveChunkRequest) (*RetrieveChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveChunk not implemented")
}
func (UnimplementedFileSharingServer) mustEmbedUnimplementedFileSharingServer() {}

// UnsafeFileSharingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileSharingServer will
// result in compilation errors.
type UnsafeFileSharingServer interface {
	mustEmbedUnimplementedFileSharingServer()
}

func RegisterFileSharingServer(s grpc.ServiceRegistrar, srv FileSharingServer) {
	s.RegisterService(&FileSharing_ServiceDesc, srv)
}

func _FileSharing_StoreChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSharingServer).StoreChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileSharing_StoreChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSharingServer).StoreChunk(ctx, req.(*StoreChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSharing_RetrieveChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSharingServer).RetrieveChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileSharing_RetrieveChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSharingServer).RetrieveChunk(ctx, req.(*RetrieveChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileSharing_ServiceDesc is the grpc.ServiceDesc for FileSharing service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileSharing_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "p2pFS.FileSharing",
	HandlerType: (*FileSharingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreChunk",
			Handler:    _FileSharing_StoreChunk_Handler,
		},
		{
			MethodName: "RetrieveChunk",
			Handler:    _FileSharing_RetrieveChunk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "p2pFS.proto",
}
