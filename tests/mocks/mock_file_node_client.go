// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/nodes/fsNode/client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pb "github.com/tomp332/p2p-agent/pkg/pb"
)

// MockFileNodeClientType is a mock of FileNodeClientType interface.
type MockFileNodeClientType struct {
	ctrl     *gomock.Controller
	recorder *MockFileNodeClientTypeMockRecorder
}

// MockFileNodeClientTypeMockRecorder is the mock recorder for MockFileNodeClientType.
type MockFileNodeClientTypeMockRecorder struct {
	mock *MockFileNodeClientType
}

// NewMockFileNodeClientType creates a new mock instance.
func NewMockFileNodeClientType(ctrl *gomock.Controller) *MockFileNodeClientType {
	mock := &MockFileNodeClientType{ctrl: ctrl}
	mock.recorder = &MockFileNodeClientTypeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileNodeClientType) EXPECT() *MockFileNodeClientTypeMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockFileNodeClientType) Authenticate(ctx context.Context, username, password string) (*pb.AuthenticateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", ctx, username, password)
	ret0, _ := ret[0].(*pb.AuthenticateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockFileNodeClientTypeMockRecorder) Authenticate(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockFileNodeClientType)(nil).Authenticate), ctx, username, password)
}

// DownloadFile mocks base method.
func (m *MockFileNodeClientType) DownloadFile(ctx context.Context, fileId string) (<-chan []byte, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFile", ctx, fileId)
	ret0, _ := ret[0].(<-chan []byte)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// DownloadFile indicates an expected call of DownloadFile.
func (mr *MockFileNodeClientTypeMockRecorder) DownloadFile(ctx, fileId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFile", reflect.TypeOf((*MockFileNodeClientType)(nil).DownloadFile), ctx, fileId)
}

// UploadFile mocks base method.
func (m *MockFileNodeClientType) UploadFile(ctx context.Context, filePath string) <-chan error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", ctx, filePath)
	ret0, _ := ret[0].(<-chan error)
	return ret0
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockFileNodeClientTypeMockRecorder) UploadFile(ctx, filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockFileNodeClientType)(nil).UploadFile), ctx, filePath)
}
