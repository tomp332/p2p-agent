// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	src "github.com/tomp332/p2p-agent/src"
	configs "github.com/tomp332/p2p-agent/src/utils/configs"
	grpc "google.golang.org/grpc"
)

// MockP2PNoder is a mock of P2PNoder interface.
type MockP2PNoder struct {
	ctrl     *gomock.Controller
	recorder *MockP2PNoderMockRecorder
}

// MockP2PNoderMockRecorder is the mock recorder for MockP2PNoder.
type MockP2PNoderMockRecorder struct {
	mock *MockP2PNoder
}

// NewMockP2PNoder creates a new mock instance.
func NewMockP2PNoder(ctrl *gomock.Controller) *MockP2PNoder {
	mock := &MockP2PNoder{ctrl: ctrl}
	mock.recorder = &MockP2PNoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockP2PNoder) EXPECT() *MockP2PNoderMockRecorder {
	return m.recorder
}

// ConnectToBootstrapPeers mocks base method.
func (m *MockP2PNoder) ConnectToBootstrapPeers(server src.AgentGRPCServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectToBootstrapPeers", server)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConnectToBootstrapPeers indicates an expected call of ConnectToBootstrapPeers.
func (mr *MockP2PNoderMockRecorder) ConnectToBootstrapPeers(server interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectToBootstrapPeers", reflect.TypeOf((*MockP2PNoder)(nil).ConnectToBootstrapPeers), server)
}

// Options mocks base method.
func (m *MockP2PNoder) Options() *configs.NodeConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Options")
	ret0, _ := ret[0].(*configs.NodeConfig)
	return ret0
}

// Options indicates an expected call of Options.
func (mr *MockP2PNoderMockRecorder) Options() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Options", reflect.TypeOf((*MockP2PNoder)(nil).Options))
}

// Register mocks base method.
func (m *MockP2PNoder) Register(server *grpc.Server) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", server)
}

// Register indicates an expected call of Register.
func (mr *MockP2PNoderMockRecorder) Register(server interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockP2PNoder)(nil).Register), server)
}

// MockP2PNodeClienter is a mock of P2PNodeClienter interface.
type MockP2PNodeClienter struct {
	ctrl     *gomock.Controller
	recorder *MockP2PNodeClienterMockRecorder
}

// MockP2PNodeClienterMockRecorder is the mock recorder for MockP2PNodeClienter.
type MockP2PNodeClienterMockRecorder struct {
	mock *MockP2PNodeClienter
}

// NewMockP2PNodeClienter creates a new mock instance.
func NewMockP2PNodeClienter(ctrl *gomock.Controller) *MockP2PNodeClienter {
	mock := &MockP2PNodeClienter{ctrl: ctrl}
	mock.recorder = &MockP2PNodeClienterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockP2PNodeClienter) EXPECT() *MockP2PNodeClienterMockRecorder {
	return m.recorder
}

// MockP2PNodeConnection is a mock of P2PNodeConnection interface.
type MockP2PNodeConnection struct {
	ctrl     *gomock.Controller
	recorder *MockP2PNodeConnectionMockRecorder
}

// MockP2PNodeConnectionMockRecorder is the mock recorder for MockP2PNodeConnection.
type MockP2PNodeConnectionMockRecorder struct {
	mock *MockP2PNodeConnection
}

// NewMockP2PNodeConnection creates a new mock instance.
func NewMockP2PNodeConnection(ctrl *gomock.Controller) *MockP2PNodeConnection {
	mock := &MockP2PNodeConnection{ctrl: ctrl}
	mock.recorder = &MockP2PNodeConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockP2PNodeConnection) EXPECT() *MockP2PNodeConnectionMockRecorder {
	return m.recorder
}

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockStorage) Delete(ctx context.Context, fileId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, fileId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStorageMockRecorder) Delete(ctx, fileId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorage)(nil).Delete), ctx, fileId)
}

// Get mocks base method.
func (m *MockStorage) Get(ctx context.Context, fileID string) (<-chan []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, fileID)
	ret0, _ := ret[0].(<-chan []byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStorageMockRecorder) Get(ctx, fileID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorage)(nil).Get), ctx, fileID)
}

// Initialize mocks base method.
func (m *MockStorage) Initialize() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize")
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize.
func (mr *MockStorageMockRecorder) Initialize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockStorage)(nil).Initialize))
}

// Put mocks base method.
func (m *MockStorage) Put(ctx context.Context, fileID string, dataChan <-chan []byte) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, fileID, dataChan)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockStorageMockRecorder) Put(ctx, fileID, dataChan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockStorage)(nil).Put), ctx, fileID, dataChan)
}

// Search mocks base method.
func (m *MockStorage) Search(fileID string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", fileID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Search indicates an expected call of Search.
func (mr *MockStorageMockRecorder) Search(fileID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockStorage)(nil).Search), fileID)
}

// MockAgentGRPCServer is a mock of AgentGRPCServer interface.
type MockAgentGRPCServer struct {
	ctrl     *gomock.Controller
	recorder *MockAgentGRPCServerMockRecorder
}

// MockAgentGRPCServerMockRecorder is the mock recorder for MockAgentGRPCServer.
type MockAgentGRPCServerMockRecorder struct {
	mock *MockAgentGRPCServer
}

// NewMockAgentGRPCServer creates a new mock instance.
func NewMockAgentGRPCServer(ctrl *gomock.Controller) *MockAgentGRPCServer {
	mock := &MockAgentGRPCServer{ctrl: ctrl}
	mock.recorder = &MockAgentGRPCServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentGRPCServer) EXPECT() *MockAgentGRPCServerMockRecorder {
	return m.recorder
}

// ClientConnection mocks base method.
func (m *MockAgentGRPCServer) ClientConnection(address string) (*grpc.ClientConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientConnection", address)
	ret0, _ := ret[0].(*grpc.ClientConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClientConnection indicates an expected call of ClientConnection.
func (mr *MockAgentGRPCServerMockRecorder) ClientConnection(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientConnection", reflect.TypeOf((*MockAgentGRPCServer)(nil).ClientConnection), address)
}

// ServerObj mocks base method.
func (m *MockAgentGRPCServer) ServerObj() *grpc.Server {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerObj")
	ret0, _ := ret[0].(*grpc.Server)
	return ret0
}

// ServerObj indicates an expected call of ServerObj.
func (mr *MockAgentGRPCServerMockRecorder) ServerObj() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerObj", reflect.TypeOf((*MockAgentGRPCServer)(nil).ServerObj))
}

// Start mocks base method.
func (m *MockAgentGRPCServer) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockAgentGRPCServerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockAgentGRPCServer)(nil).Start))
}

// Terminate mocks base method.
func (m *MockAgentGRPCServer) Terminate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Terminate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Terminate indicates an expected call of Terminate.
func (mr *MockAgentGRPCServerMockRecorder) Terminate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Terminate", reflect.TypeOf((*MockAgentGRPCServer)(nil).Terminate))
}
