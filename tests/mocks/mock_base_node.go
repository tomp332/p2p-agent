// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/nodes/base_node.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	server "github.com/tomp332/p2p-agent/pkg/server"
	configs "github.com/tomp332/p2p-agent/pkg/utils/configs"
)

// MockP2PNoder is a mock of P2PNoder interface.
type MockP2PNoder struct {
	ctrl     *gomock.Controller
	recorder *MockP2PNoderMockRecorder
}

// MockP2PNoderMockRecorder is the mock recorder for MockP2PNoder.
type MockP2PNoderMockRecorder struct {
	mock *MockP2PNoder
}

// NewMockP2PNoder creates a new mock instance.
func NewMockP2PNoder(ctrl *gomock.Controller) *MockP2PNoder {
	mock := &MockP2PNoder{ctrl: ctrl}
	mock.recorder = &MockP2PNoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockP2PNoder) EXPECT() *MockP2PNoderMockRecorder {
	return m.recorder
}

// ConnectToBootstrapPeers mocks base method.
func (m *MockP2PNoder) ConnectToBootstrapPeers() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectToBootstrapPeers")
	ret0, _ := ret[0].(error)
	return ret0
}

// ConnectToBootstrapPeers indicates an expected call of ConnectToBootstrapPeers.
func (mr *MockP2PNoderMockRecorder) ConnectToBootstrapPeers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectToBootstrapPeers", reflect.TypeOf((*MockP2PNoder)(nil).ConnectToBootstrapPeers))
}

// Options mocks base method.
func (m *MockP2PNoder) Options() *configs.NodeConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Options")
	ret0, _ := ret[0].(*configs.NodeConfig)
	return ret0
}

// Options indicates an expected call of Options.
func (mr *MockP2PNoderMockRecorder) Options() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Options", reflect.TypeOf((*MockP2PNoder)(nil).Options))
}

// Register mocks base method.
func (m *MockP2PNoder) Register(server *server.GRPCServer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", server)
}

// Register indicates an expected call of Register.
func (mr *MockP2PNoderMockRecorder) Register(server interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockP2PNoder)(nil).Register), server)
}
