// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/pb/files_node_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pb "github.com/tomp332/p2p-agent/pkg/pb"
	grpc "google.golang.org/grpc"
)

// MockFilesNodeServiceClient is a mock of FilesNodeServiceClient interface.
type MockFilesNodeServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockFilesNodeServiceClientMockRecorder
}

// MockFilesNodeServiceClientMockRecorder is the mock recorder for MockFilesNodeServiceClient.
type MockFilesNodeServiceClientMockRecorder struct {
	mock *MockFilesNodeServiceClient
}

// NewMockFilesNodeServiceClient creates a new mock instance.
func NewMockFilesNodeServiceClient(ctrl *gomock.Controller) *MockFilesNodeServiceClient {
	mock := &MockFilesNodeServiceClient{ctrl: ctrl}
	mock.recorder = &MockFilesNodeServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesNodeServiceClient) EXPECT() *MockFilesNodeServiceClientMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockFilesNodeServiceClient) Authenticate(ctx context.Context, in *pb.AuthenticateRequest, opts ...grpc.CallOption) (*pb.AuthenticateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Authenticate", varargs...)
	ret0, _ := ret[0].(*pb.AuthenticateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockFilesNodeServiceClientMockRecorder) Authenticate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockFilesNodeServiceClient)(nil).Authenticate), varargs...)
}

// DeleteFile mocks base method.
func (m *MockFilesNodeServiceClient) DeleteFile(ctx context.Context, in *pb.DeleteFileRequest, opts ...grpc.CallOption) (*pb.DeleteFileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFile", varargs...)
	ret0, _ := ret[0].(*pb.DeleteFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockFilesNodeServiceClientMockRecorder) DeleteFile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockFilesNodeServiceClient)(nil).DeleteFile), varargs...)
}

// DownloadFile mocks base method.
func (m *MockFilesNodeServiceClient) DownloadFile(ctx context.Context, in *pb.DownloadFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[pb.DownloadFileResponse], error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DownloadFile", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[pb.DownloadFileResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadFile indicates an expected call of DownloadFile.
func (mr *MockFilesNodeServiceClientMockRecorder) DownloadFile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFile", reflect.TypeOf((*MockFilesNodeServiceClient)(nil).DownloadFile), varargs...)
}

// SearchFile mocks base method.
func (m *MockFilesNodeServiceClient) SearchFile(ctx context.Context, in *pb.SearchFileRequest, opts ...grpc.CallOption) (*pb.SearchFileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchFile", varargs...)
	ret0, _ := ret[0].(*pb.SearchFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchFile indicates an expected call of SearchFile.
func (mr *MockFilesNodeServiceClientMockRecorder) SearchFile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFile", reflect.TypeOf((*MockFilesNodeServiceClient)(nil).SearchFile), varargs...)
}

// UploadFile mocks base method.
func (m *MockFilesNodeServiceClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[pb.UploadFileRequest, pb.UploadFileResponse], error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UploadFile", varargs...)
	ret0, _ := ret[0].(grpc.ClientStreamingClient[pb.UploadFileRequest, pb.UploadFileResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockFilesNodeServiceClientMockRecorder) UploadFile(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockFilesNodeServiceClient)(nil).UploadFile), varargs...)
}

// MockFilesNodeServiceServer is a mock of FilesNodeServiceServer interface.
type MockFilesNodeServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockFilesNodeServiceServerMockRecorder
}

// MockFilesNodeServiceServerMockRecorder is the mock recorder for MockFilesNodeServiceServer.
type MockFilesNodeServiceServerMockRecorder struct {
	mock *MockFilesNodeServiceServer
}

// NewMockFilesNodeServiceServer creates a new mock instance.
func NewMockFilesNodeServiceServer(ctrl *gomock.Controller) *MockFilesNodeServiceServer {
	mock := &MockFilesNodeServiceServer{ctrl: ctrl}
	mock.recorder = &MockFilesNodeServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesNodeServiceServer) EXPECT() *MockFilesNodeServiceServerMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockFilesNodeServiceServer) Authenticate(arg0 context.Context, arg1 *pb.AuthenticateRequest) (*pb.AuthenticateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", arg0, arg1)
	ret0, _ := ret[0].(*pb.AuthenticateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockFilesNodeServiceServerMockRecorder) Authenticate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockFilesNodeServiceServer)(nil).Authenticate), arg0, arg1)
}

// DeleteFile mocks base method.
func (m *MockFilesNodeServiceServer) DeleteFile(arg0 context.Context, arg1 *pb.DeleteFileRequest) (*pb.DeleteFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", arg0, arg1)
	ret0, _ := ret[0].(*pb.DeleteFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockFilesNodeServiceServerMockRecorder) DeleteFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockFilesNodeServiceServer)(nil).DeleteFile), arg0, arg1)
}

// DownloadFile mocks base method.
func (m *MockFilesNodeServiceServer) DownloadFile(arg0 *pb.DownloadFileRequest, arg1 grpc.ServerStreamingServer[pb.DownloadFileResponse]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadFile indicates an expected call of DownloadFile.
func (mr *MockFilesNodeServiceServerMockRecorder) DownloadFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFile", reflect.TypeOf((*MockFilesNodeServiceServer)(nil).DownloadFile), arg0, arg1)
}

// SearchFile mocks base method.
func (m *MockFilesNodeServiceServer) SearchFile(arg0 context.Context, arg1 *pb.SearchFileRequest) (*pb.SearchFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchFile", arg0, arg1)
	ret0, _ := ret[0].(*pb.SearchFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchFile indicates an expected call of SearchFile.
func (mr *MockFilesNodeServiceServerMockRecorder) SearchFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFile", reflect.TypeOf((*MockFilesNodeServiceServer)(nil).SearchFile), arg0, arg1)
}

// UploadFile mocks base method.
func (m *MockFilesNodeServiceServer) UploadFile(arg0 grpc.ClientStreamingServer[pb.UploadFileRequest, pb.UploadFileResponse]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockFilesNodeServiceServerMockRecorder) UploadFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockFilesNodeServiceServer)(nil).UploadFile), arg0)
}

// mustEmbedUnimplementedFilesNodeServiceServer mocks base method.
func (m *MockFilesNodeServiceServer) mustEmbedUnimplementedFilesNodeServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFilesNodeServiceServer")
}

// mustEmbedUnimplementedFilesNodeServiceServer indicates an expected call of mustEmbedUnimplementedFilesNodeServiceServer.
func (mr *MockFilesNodeServiceServerMockRecorder) mustEmbedUnimplementedFilesNodeServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFilesNodeServiceServer", reflect.TypeOf((*MockFilesNodeServiceServer)(nil).mustEmbedUnimplementedFilesNodeServiceServer))
}

// MockUnsafeFilesNodeServiceServer is a mock of UnsafeFilesNodeServiceServer interface.
type MockUnsafeFilesNodeServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeFilesNodeServiceServerMockRecorder
}

// MockUnsafeFilesNodeServiceServerMockRecorder is the mock recorder for MockUnsafeFilesNodeServiceServer.
type MockUnsafeFilesNodeServiceServerMockRecorder struct {
	mock *MockUnsafeFilesNodeServiceServer
}

// NewMockUnsafeFilesNodeServiceServer creates a new mock instance.
func NewMockUnsafeFilesNodeServiceServer(ctrl *gomock.Controller) *MockUnsafeFilesNodeServiceServer {
	mock := &MockUnsafeFilesNodeServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeFilesNodeServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeFilesNodeServiceServer) EXPECT() *MockUnsafeFilesNodeServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedFilesNodeServiceServer mocks base method.
func (m *MockUnsafeFilesNodeServiceServer) mustEmbedUnimplementedFilesNodeServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFilesNodeServiceServer")
}

// mustEmbedUnimplementedFilesNodeServiceServer indicates an expected call of mustEmbedUnimplementedFilesNodeServiceServer.
func (mr *MockUnsafeFilesNodeServiceServerMockRecorder) mustEmbedUnimplementedFilesNodeServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFilesNodeServiceServer", reflect.TypeOf((*MockUnsafeFilesNodeServiceServer)(nil).mustEmbedUnimplementedFilesNodeServiceServer))
}
