// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/pb/files_node_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pb "github.com/tomp332/p2p-agent/pkg/pb"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockFilesNodeServiceClient is a mock of FilesNodeServiceClient interface.
type MockFilesNodeServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockFilesNodeServiceClientMockRecorder
}

// MockFilesNodeServiceClientMockRecorder is the mock recorder for MockFilesNodeServiceClient.
type MockFilesNodeServiceClientMockRecorder struct {
	mock *MockFilesNodeServiceClient
}

// NewMockFilesNodeServiceClient creates a new mock instance.
func NewMockFilesNodeServiceClient(ctrl *gomock.Controller) *MockFilesNodeServiceClient {
	mock := &MockFilesNodeServiceClient{ctrl: ctrl}
	mock.recorder = &MockFilesNodeServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesNodeServiceClient) EXPECT() *MockFilesNodeServiceClientMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockFilesNodeServiceClient) Authenticate(ctx context.Context, in *pb.AuthenticateRequest, opts ...grpc.CallOption) (*pb.AuthenticateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Authenticate", varargs...)
	ret0, _ := ret[0].(*pb.AuthenticateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockFilesNodeServiceClientMockRecorder) Authenticate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockFilesNodeServiceClient)(nil).Authenticate), varargs...)
}

// DeleteFile mocks base method.
func (m *MockFilesNodeServiceClient) DeleteFile(ctx context.Context, in *pb.DeleteFileRequest, opts ...grpc.CallOption) (*pb.DeleteFileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFile", varargs...)
	ret0, _ := ret[0].(*pb.DeleteFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockFilesNodeServiceClientMockRecorder) DeleteFile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockFilesNodeServiceClient)(nil).DeleteFile), varargs...)
}

// DownloadFile mocks base method.
func (m *MockFilesNodeServiceClient) DownloadFile(ctx context.Context, in *pb.DownloadFileRequest, opts ...grpc.CallOption) (pb.FilesNodeService_DownloadFileClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DownloadFile", varargs...)
	ret0, _ := ret[0].(pb.FilesNodeService_DownloadFileClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadFile indicates an expected call of DownloadFile.
func (mr *MockFilesNodeServiceClientMockRecorder) DownloadFile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFile", reflect.TypeOf((*MockFilesNodeServiceClient)(nil).DownloadFile), varargs...)
}

// UploadFile mocks base method.
func (m *MockFilesNodeServiceClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (pb.FilesNodeService_UploadFileClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UploadFile", varargs...)
	ret0, _ := ret[0].(pb.FilesNodeService_UploadFileClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockFilesNodeServiceClientMockRecorder) UploadFile(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockFilesNodeServiceClient)(nil).UploadFile), varargs...)
}

// MockFilesNodeService_UploadFileClient is a mock of FilesNodeService_UploadFileClient interface.
type MockFilesNodeService_UploadFileClient struct {
	ctrl     *gomock.Controller
	recorder *MockFilesNodeService_UploadFileClientMockRecorder
}

// MockFilesNodeService_UploadFileClientMockRecorder is the mock recorder for MockFilesNodeService_UploadFileClient.
type MockFilesNodeService_UploadFileClientMockRecorder struct {
	mock *MockFilesNodeService_UploadFileClient
}

// NewMockFilesNodeService_UploadFileClient creates a new mock instance.
func NewMockFilesNodeService_UploadFileClient(ctrl *gomock.Controller) *MockFilesNodeService_UploadFileClient {
	mock := &MockFilesNodeService_UploadFileClient{ctrl: ctrl}
	mock.recorder = &MockFilesNodeService_UploadFileClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesNodeService_UploadFileClient) EXPECT() *MockFilesNodeService_UploadFileClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method.
func (m *MockFilesNodeService_UploadFileClient) CloseAndRecv() (*pb.UploadFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*pb.UploadFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv.
func (mr *MockFilesNodeService_UploadFileClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockFilesNodeService_UploadFileClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method.
func (m *MockFilesNodeService_UploadFileClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockFilesNodeService_UploadFileClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockFilesNodeService_UploadFileClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockFilesNodeService_UploadFileClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockFilesNodeService_UploadFileClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockFilesNodeService_UploadFileClient)(nil).Context))
}

// Header mocks base method.
func (m *MockFilesNodeService_UploadFileClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockFilesNodeService_UploadFileClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockFilesNodeService_UploadFileClient)(nil).Header))
}

// RecvMsg mocks base method.
func (m_2 *MockFilesNodeService_UploadFileClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockFilesNodeService_UploadFileClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockFilesNodeService_UploadFileClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockFilesNodeService_UploadFileClient) Send(arg0 *pb.UploadFileRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockFilesNodeService_UploadFileClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockFilesNodeService_UploadFileClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockFilesNodeService_UploadFileClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockFilesNodeService_UploadFileClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockFilesNodeService_UploadFileClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockFilesNodeService_UploadFileClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockFilesNodeService_UploadFileClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockFilesNodeService_UploadFileClient)(nil).Trailer))
}

// MockFilesNodeService_DownloadFileClient is a mock of FilesNodeService_DownloadFileClient interface.
type MockFilesNodeService_DownloadFileClient struct {
	ctrl     *gomock.Controller
	recorder *MockFilesNodeService_DownloadFileClientMockRecorder
}

// MockFilesNodeService_DownloadFileClientMockRecorder is the mock recorder for MockFilesNodeService_DownloadFileClient.
type MockFilesNodeService_DownloadFileClientMockRecorder struct {
	mock *MockFilesNodeService_DownloadFileClient
}

// NewMockFilesNodeService_DownloadFileClient creates a new mock instance.
func NewMockFilesNodeService_DownloadFileClient(ctrl *gomock.Controller) *MockFilesNodeService_DownloadFileClient {
	mock := &MockFilesNodeService_DownloadFileClient{ctrl: ctrl}
	mock.recorder = &MockFilesNodeService_DownloadFileClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesNodeService_DownloadFileClient) EXPECT() *MockFilesNodeService_DownloadFileClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockFilesNodeService_DownloadFileClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockFilesNodeService_DownloadFileClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockFilesNodeService_DownloadFileClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockFilesNodeService_DownloadFileClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockFilesNodeService_DownloadFileClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockFilesNodeService_DownloadFileClient)(nil).Context))
}

// Header mocks base method.
func (m *MockFilesNodeService_DownloadFileClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockFilesNodeService_DownloadFileClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockFilesNodeService_DownloadFileClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockFilesNodeService_DownloadFileClient) Recv() (*pb.DownloadFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*pb.DownloadFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockFilesNodeService_DownloadFileClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockFilesNodeService_DownloadFileClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockFilesNodeService_DownloadFileClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockFilesNodeService_DownloadFileClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockFilesNodeService_DownloadFileClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockFilesNodeService_DownloadFileClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockFilesNodeService_DownloadFileClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockFilesNodeService_DownloadFileClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockFilesNodeService_DownloadFileClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockFilesNodeService_DownloadFileClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockFilesNodeService_DownloadFileClient)(nil).Trailer))
}

// MockFilesNodeServiceServer is a mock of FilesNodeServiceServer interface.
type MockFilesNodeServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockFilesNodeServiceServerMockRecorder
}

// MockFilesNodeServiceServerMockRecorder is the mock recorder for MockFilesNodeServiceServer.
type MockFilesNodeServiceServerMockRecorder struct {
	mock *MockFilesNodeServiceServer
}

// NewMockFilesNodeServiceServer creates a new mock instance.
func NewMockFilesNodeServiceServer(ctrl *gomock.Controller) *MockFilesNodeServiceServer {
	mock := &MockFilesNodeServiceServer{ctrl: ctrl}
	mock.recorder = &MockFilesNodeServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesNodeServiceServer) EXPECT() *MockFilesNodeServiceServerMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockFilesNodeServiceServer) Authenticate(arg0 context.Context, arg1 *pb.AuthenticateRequest) (*pb.AuthenticateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", arg0, arg1)
	ret0, _ := ret[0].(*pb.AuthenticateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockFilesNodeServiceServerMockRecorder) Authenticate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockFilesNodeServiceServer)(nil).Authenticate), arg0, arg1)
}

// DeleteFile mocks base method.
func (m *MockFilesNodeServiceServer) DeleteFile(arg0 context.Context, arg1 *pb.DeleteFileRequest) (*pb.DeleteFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", arg0, arg1)
	ret0, _ := ret[0].(*pb.DeleteFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockFilesNodeServiceServerMockRecorder) DeleteFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockFilesNodeServiceServer)(nil).DeleteFile), arg0, arg1)
}

// DownloadFile mocks base method.
func (m *MockFilesNodeServiceServer) DownloadFile(arg0 *pb.DownloadFileRequest, arg1 pb.FilesNodeService_DownloadFileServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadFile indicates an expected call of DownloadFile.
func (mr *MockFilesNodeServiceServerMockRecorder) DownloadFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFile", reflect.TypeOf((*MockFilesNodeServiceServer)(nil).DownloadFile), arg0, arg1)
}

// UploadFile mocks base method.
func (m *MockFilesNodeServiceServer) UploadFile(arg0 pb.FilesNodeService_UploadFileServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockFilesNodeServiceServerMockRecorder) UploadFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockFilesNodeServiceServer)(nil).UploadFile), arg0)
}

// mustEmbedUnimplementedFilesNodeServiceServer mocks base method.
func (m *MockFilesNodeServiceServer) mustEmbedUnimplementedFilesNodeServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFilesNodeServiceServer")
}

// mustEmbedUnimplementedFilesNodeServiceServer indicates an expected call of mustEmbedUnimplementedFilesNodeServiceServer.
func (mr *MockFilesNodeServiceServerMockRecorder) mustEmbedUnimplementedFilesNodeServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFilesNodeServiceServer", reflect.TypeOf((*MockFilesNodeServiceServer)(nil).mustEmbedUnimplementedFilesNodeServiceServer))
}

// MockUnsafeFilesNodeServiceServer is a mock of UnsafeFilesNodeServiceServer interface.
type MockUnsafeFilesNodeServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeFilesNodeServiceServerMockRecorder
}

// MockUnsafeFilesNodeServiceServerMockRecorder is the mock recorder for MockUnsafeFilesNodeServiceServer.
type MockUnsafeFilesNodeServiceServerMockRecorder struct {
	mock *MockUnsafeFilesNodeServiceServer
}

// NewMockUnsafeFilesNodeServiceServer creates a new mock instance.
func NewMockUnsafeFilesNodeServiceServer(ctrl *gomock.Controller) *MockUnsafeFilesNodeServiceServer {
	mock := &MockUnsafeFilesNodeServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeFilesNodeServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeFilesNodeServiceServer) EXPECT() *MockUnsafeFilesNodeServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedFilesNodeServiceServer mocks base method.
func (m *MockUnsafeFilesNodeServiceServer) mustEmbedUnimplementedFilesNodeServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFilesNodeServiceServer")
}

// mustEmbedUnimplementedFilesNodeServiceServer indicates an expected call of mustEmbedUnimplementedFilesNodeServiceServer.
func (mr *MockUnsafeFilesNodeServiceServerMockRecorder) mustEmbedUnimplementedFilesNodeServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFilesNodeServiceServer", reflect.TypeOf((*MockUnsafeFilesNodeServiceServer)(nil).mustEmbedUnimplementedFilesNodeServiceServer))
}

// MockFilesNodeService_UploadFileServer is a mock of FilesNodeService_UploadFileServer interface.
type MockFilesNodeService_UploadFileServer struct {
	ctrl     *gomock.Controller
	recorder *MockFilesNodeService_UploadFileServerMockRecorder
}

// MockFilesNodeService_UploadFileServerMockRecorder is the mock recorder for MockFilesNodeService_UploadFileServer.
type MockFilesNodeService_UploadFileServerMockRecorder struct {
	mock *MockFilesNodeService_UploadFileServer
}

// NewMockFilesNodeService_UploadFileServer creates a new mock instance.
func NewMockFilesNodeService_UploadFileServer(ctrl *gomock.Controller) *MockFilesNodeService_UploadFileServer {
	mock := &MockFilesNodeService_UploadFileServer{ctrl: ctrl}
	mock.recorder = &MockFilesNodeService_UploadFileServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesNodeService_UploadFileServer) EXPECT() *MockFilesNodeService_UploadFileServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockFilesNodeService_UploadFileServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockFilesNodeService_UploadFileServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockFilesNodeService_UploadFileServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockFilesNodeService_UploadFileServer) Recv() (*pb.UploadFileRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*pb.UploadFileRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockFilesNodeService_UploadFileServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockFilesNodeService_UploadFileServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockFilesNodeService_UploadFileServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockFilesNodeService_UploadFileServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockFilesNodeService_UploadFileServer)(nil).RecvMsg), m)
}

// SendAndClose mocks base method.
func (m *MockFilesNodeService_UploadFileServer) SendAndClose(arg0 *pb.UploadFileResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose.
func (mr *MockFilesNodeService_UploadFileServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockFilesNodeService_UploadFileServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method.
func (m *MockFilesNodeService_UploadFileServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockFilesNodeService_UploadFileServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockFilesNodeService_UploadFileServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockFilesNodeService_UploadFileServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockFilesNodeService_UploadFileServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockFilesNodeService_UploadFileServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockFilesNodeService_UploadFileServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockFilesNodeService_UploadFileServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockFilesNodeService_UploadFileServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockFilesNodeService_UploadFileServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockFilesNodeService_UploadFileServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockFilesNodeService_UploadFileServer)(nil).SetTrailer), arg0)
}

// MockFilesNodeService_DownloadFileServer is a mock of FilesNodeService_DownloadFileServer interface.
type MockFilesNodeService_DownloadFileServer struct {
	ctrl     *gomock.Controller
	recorder *MockFilesNodeService_DownloadFileServerMockRecorder
}

// MockFilesNodeService_DownloadFileServerMockRecorder is the mock recorder for MockFilesNodeService_DownloadFileServer.
type MockFilesNodeService_DownloadFileServerMockRecorder struct {
	mock *MockFilesNodeService_DownloadFileServer
}

// NewMockFilesNodeService_DownloadFileServer creates a new mock instance.
func NewMockFilesNodeService_DownloadFileServer(ctrl *gomock.Controller) *MockFilesNodeService_DownloadFileServer {
	mock := &MockFilesNodeService_DownloadFileServer{ctrl: ctrl}
	mock.recorder = &MockFilesNodeService_DownloadFileServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesNodeService_DownloadFileServer) EXPECT() *MockFilesNodeService_DownloadFileServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockFilesNodeService_DownloadFileServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockFilesNodeService_DownloadFileServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockFilesNodeService_DownloadFileServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockFilesNodeService_DownloadFileServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockFilesNodeService_DownloadFileServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockFilesNodeService_DownloadFileServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockFilesNodeService_DownloadFileServer) Send(arg0 *pb.DownloadFileResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockFilesNodeService_DownloadFileServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockFilesNodeService_DownloadFileServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockFilesNodeService_DownloadFileServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockFilesNodeService_DownloadFileServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockFilesNodeService_DownloadFileServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockFilesNodeService_DownloadFileServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockFilesNodeService_DownloadFileServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockFilesNodeService_DownloadFileServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockFilesNodeService_DownloadFileServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockFilesNodeService_DownloadFileServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockFilesNodeService_DownloadFileServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockFilesNodeService_DownloadFileServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockFilesNodeService_DownloadFileServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockFilesNodeService_DownloadFileServer)(nil).SetTrailer), arg0)
}
